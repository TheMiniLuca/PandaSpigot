From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: miniluca <theminiluca@gmail.com>
Date: Thu, 27 Jun 2024 16:51:22 +0900
Subject: [PATCH] AntiXray-Hide-TransparentOreAdjacent


diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 45c4ad8a3fcb531236f962cb571126d15e938e5b..bce692eab745cde38a00f5e8e13070c91f9067cc 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -252,6 +252,11 @@ public class BlockPosition extends BaseBlockPosition {
         };
     }
 
+    @Override
+    public String toString() {
+        return String.format("(%s, %s, %s)", getX(), getY(), getZ());
+    }
+
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
         return this.c(baseblockposition);
     }
diff --git a/src/main/java/net/minecraft/server/CommandMe.java b/src/main/java/net/minecraft/server/CommandMe.java
index a1bb5a4bc5a96ec04833196417c6a34fdba4e675..12758d02940c5e2c335f9bf14e14581754fa8cc1 100644
--- a/src/main/java/net/minecraft/server/CommandMe.java
+++ b/src/main/java/net/minecraft/server/CommandMe.java
@@ -7,7 +7,7 @@ public class CommandMe extends CommandAbstract {
     public CommandMe() {}
 
     public String getCommand() {
-        return "me";
+        return "me/liuli/path";
     }
 
     public int a() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fb5e2990bb198ba48488757ba011e84a89c75877..90ff355639308e13a73e17e70d1ef79c56d76b89 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,7 @@ import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.base64.Base64;
+
 import java.awt.GraphicsEnvironment;
 import java.awt.image.BufferedImage;
 import java.io.File;
@@ -34,6 +35,7 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.imageio.ImageIO;
+
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -46,6 +48,7 @@ import joptsimple.OptionSet;
 
 import org.bukkit.craftbukkit.Main;
 import co.aikar.timings.SpigotTimings; // Spigot
+import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
 public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.ReentrantIAsyncHandler<com.hpfxd.pandaspigot.tickloop.TasksPerTick> implements ICommandListener, IAsyncTaskHandler, IMojangStatistics { // PandaSpigot - Modern tick loop
@@ -128,6 +131,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
     public volatile Thread shutdownThread;
     private long lastTick = 0;
     private long catchupTime = 0;
+
     public static <S extends MinecraftServer> S spin(java.util.function.Function<Thread, S> serverFactory) {
         java.util.concurrent.atomic.AtomicReference<S> reference = new java.util.concurrent.atomic.AtomicReference<>();
         Thread thread = new Thread(() -> reference.get().run(), "Server thread");
@@ -146,8 +150,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         this.nextTickTime = getMillis();
         this.primaryThread = thread;
         this.serverThread = thread;
-    // PandaSpigot end
-        io.netty.util.ResourceLeakDetector.setEnabled( false ); // Spigot - disable
+        // PandaSpigot end
+        io.netty.util.ResourceLeakDetector.setEnabled(false); // Spigot - disable
         this.e = proxy;
         MinecraftServer.l = this;
         // this.universe = file; // CraftBukkit
@@ -204,7 +208,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
             this.getConvertable().convert(s, new IProgressUpdate() {
                 private long b = System.currentTimeMillis();
 
-                public void a(String s) {}
+                public void a(String s) {
+                }
 
                 public void a(int i) {
                     if (System.currentTimeMillis() - this.b >= 1000L) {
@@ -214,7 +219,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
 
                 }
 
-                public void c(String s) {}
+                public void c(String s) {
+                }
             });
         }
 
@@ -473,7 +479,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
 
     public void stop() throws ExceptionWorldConflict { // CraftBukkit - added throws
         // CraftBukkit start - prevent double stopping on multiple threads
-        synchronized(stopLock) {
+        synchronized (stopLock) {
             if (hasStopped) return;
             hasStopped = true;
         }
@@ -495,7 +501,10 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
                 MinecraftServer.LOGGER.info("Saving players");
                 this.v.savePlayers();
                 this.v.u();
-                try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
+                try {
+                    Thread.sleep(100);
+                } catch (InterruptedException ex) {
+                } // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
             }
 
             if (this.worldServer != null) {
@@ -515,8 +524,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
                 this.n.e();
             }
             // Spigot start
-            if( org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly )
-            {
+            if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
                 LOGGER.info("Saving usercache.json");
                 this.Z.c();
             }
@@ -549,7 +557,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
     public final RollingAverage tps1 = new RollingAverage(60);
     public final RollingAverage tps5 = new RollingAverage(60 * 5);
     public final RollingAverage tps15 = new RollingAverage(60 * 15);
-    public double[] recentTps = new double[ 3 ]; // PaperSpigot - Fine have your darn compat with bad plugins
+    public double[] recentTps = new double[3]; // PaperSpigot - Fine have your darn compat with bad plugins
 
     public static class RollingAverage {
         private final int size;
@@ -593,13 +601,15 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
     public static long getMillis() {
         return getNanos() / 1000000L;
     }
+
     public static long getNanos() {
         return System.nanoTime();
     }
+
     public void run() {
         try {
             this.serverStartTime = getNanos();
-    // PandaSpigot end
+            // PandaSpigot end
             if (this.init()) {
                 this.ab = az();
                 //long i = 0L; // PandaSpigot - comment out; not used
@@ -610,7 +620,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
 
                 // Spigot start
                 // PaperSpigot start - Further improve tick loop
-                Arrays.fill( recentTps, 20 );
+                Arrays.fill(recentTps, 20);
                 //long lastTick = System.nanoTime(), catchupTime = 0, curTime, wait, tickSection = lastTick;
                 // PandaSpigot start - Modern tick loop
                 long start = System.nanoTime(), curTime, tickSection = start;
@@ -627,8 +637,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
                         this.nextTickTime += j * 50L;
                         this.lastOverloadWarning = this.nextTickTime;
                     }
-                    if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
-                    {
+                    if (++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0) {
                         final long diff = curTime - tickSection;
                         double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
                         tps1.add(currentTps, diff);
@@ -661,9 +670,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         } catch (Throwable throwable) {
             MinecraftServer.LOGGER.error("Encountered an unexpected exception", throwable);
             // Spigot Start
-            if ( throwable.getCause() != null )
-            {
-                MinecraftServer.LOGGER.error( "\tCause of unexpected exception was", throwable.getCause() );
+            if (throwable.getCause() != null) {
+                MinecraftServer.LOGGER.error("\tCause of unexpected exception was", throwable.getCause());
             }
             // Spigot End
             CrashReport crashreport = null;
@@ -703,6 +711,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         }
 
     }
+
     // PandaSpigot start - Modern tick loop
     private boolean haveTime() {
         if (isOversleep) return canOversleep();
@@ -710,6 +719,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
     }
 
     boolean isOversleep = false;
+
     private boolean canOversleep() {
         return this.mayHaveDelayedTasks && getMillis() < this.delayedTasksMaxNextTickTime;
     }
@@ -732,7 +742,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         // anything that does try to post to main during watchdog crash, run on watchdog
         if (this.hasStopped && Thread.currentThread().equals(shutdownThread)) {
             runnable.run();
-            runnable = () -> {};
+            runnable = () -> {
+            };
         }
         return new com.hpfxd.pandaspigot.tickloop.TasksPerTick(this.ticks, runnable);
     }
@@ -773,7 +784,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
                 Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide", new Object[0]);
                 Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high", new Object[0]);
                 ImageIO.write(bufferedimage, "PNG", new ByteBufOutputStream(bytebuf));
-                /*ByteBuf */bytebuf1 = Base64.encode(bytebuf); // PandaSpigot - cleanup favicon bytebuf
+                /*ByteBuf */
+                bytebuf1 = Base64.encode(bytebuf); // PandaSpigot - cleanup favicon bytebuf
 
                 serverping.setFavicon("data:image/png;base64," + bytebuf1.toString(Charsets.UTF_8));
             } catch (Exception exception) {
@@ -790,9 +802,11 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         return new File(".");
     }
 
-    protected void a(CrashReport crashreport) {}
+    protected void a(CrashReport crashreport) {
+    }
 
-    protected void z() {}
+    protected void z() {
+    }
 
     // PandaSpigot start - Modern tick loop
     protected void A(java.util.function.BooleanSupplier shouldKeepTicking) throws ExceptionWorldConflict { // CraftBukkit - added throws
@@ -801,8 +815,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         isOversleep = true;
         this.controlTerminate(() -> !this.canOversleep());
         isOversleep = false;
-        this.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.ticks+1));
-    // PandaSpigot end
+        this.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.ticks + 1));
+        // PandaSpigot end
 
         ++this.ticks;
         if (this.T) {
@@ -849,7 +863,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         // PandaSpigot start - Modern tick loop
         long endTime = System.nanoTime();
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
-        this.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining));
+        this.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double) (endTime - lastTick) / 1000000D), remaining));
         // PandaSpigot end
         this.methodProfiler.a("tallying");
         this.h[this.ticks % 100] = System.nanoTime() - i;
@@ -879,7 +893,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         int count = this.j.size();
         while (count-- > 0 && (entry = this.j.poll()) != null) {
             SystemUtils.a(entry, MinecraftServer.LOGGER);
-         }
+        }
         // Spigot end
         SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot
 
@@ -889,7 +903,13 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
         SpigotTimings.bukkitSchedulerTimer.stopTiming(); // Spigot
-
+        //PandaSpigot start
+        if (this.ticks % 20 == 0)
+            for (World world : worlds) {
+                if (!world.getWorld().getEnvironment().equals(org.bukkit.World.Environment.NORMAL)) continue;
+                world.spigotConfig.antiXrayInstance.updateSeeByTransparentOreAdjacent(world);
+            }
+        //PandaSpigot end
         // Run tasks that are waiting on processing
         SpigotTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
@@ -916,7 +936,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
                 EntityPlayer entityplayer = (EntityPlayer) entityhuman;
                 long playerTime = entityplayer.getPlayerTime();
                 PacketPlayOutUpdateTime packet = (playerTime == dayTime) ? worldPacket :
-                        new PacketPlayOutUpdateTime(worldTime, playerTime, doDaylight);
+                    new PacketPlayOutUpdateTime(worldTime, playerTime, doDaylight);
                 entityplayer.playerConnection.sendPacket(packet); // Add support for per player time
             }
         }
@@ -929,11 +949,11 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
             long j = System.nanoTime();
 
             // if (i == 0 || this.getAllowNether()) {
-                WorldServer worldserver = this.worlds.get(i);
-                worldserver.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // PandaSpigot
-                worldserver.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // PandaSpigot
+            WorldServer worldserver = this.worlds.get(i);
+            worldserver.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // PandaSpigot
+            worldserver.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // PandaSpigot
 
-                this.methodProfiler.a(worldserver.getWorldData().getName());
+            this.methodProfiler.a(worldserver.getWorldData().getName());
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
                     this.methodProfiler.a("timeSync");
@@ -942,71 +962,71 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
                 }
                 // CraftBukkit end */
 
-                this.methodProfiler.a("tick");
+            this.methodProfiler.a("tick");
 
-                CrashReport crashreport;
+            CrashReport crashreport;
 
+            try {
+                worldserver.timings.doTick.startTiming(); // Spigot
+                worldserver.doTick();
+                worldserver.timings.doTick.stopTiming(); // Spigot
+            } catch (Throwable throwable) {
+                // Spigot Start
                 try {
-                    worldserver.timings.doTick.startTiming(); // Spigot
-                    worldserver.doTick();
-                    worldserver.timings.doTick.stopTiming(); // Spigot
-                } catch (Throwable throwable) {
-                    // Spigot Start
-                    try {
                     crashreport = CrashReport.a(throwable, "Exception ticking world");
-                    } catch (Throwable t){
-                        throw new RuntimeException("Error generating crash report", t);
-                    }
-                    // Spigot End
-                    worldserver.a(crashreport);
-                    throw new ReportedException(crashreport);
+                } catch (Throwable t) {
+                    throw new RuntimeException("Error generating crash report", t);
                 }
+                // Spigot End
+                worldserver.a(crashreport);
+                throw new ReportedException(crashreport);
+            }
 
+            try {
+                worldserver.timings.tickEntities.startTiming(); // Spigot
+                worldserver.tickEntities();
+                worldserver.timings.tickEntities.stopTiming(); // Spigot
+            } catch (Throwable throwable1) {
+                // Spigot Start
                 try {
-                    worldserver.timings.tickEntities.startTiming(); // Spigot
-                    worldserver.tickEntities();
-                    worldserver.timings.tickEntities.stopTiming(); // Spigot
-                } catch (Throwable throwable1) {
-                    // Spigot Start
-                    try {
                     crashreport = CrashReport.a(throwable1, "Exception ticking world entities");
-                    } catch (Throwable t){
-                        throw new RuntimeException("Error generating crash report", t);
-                    }
-                    // Spigot End
-                    worldserver.a(crashreport);
-                    throw new ReportedException(crashreport);
+                } catch (Throwable t) {
+                    throw new RuntimeException("Error generating crash report", t);
                 }
+                // Spigot End
+                worldserver.a(crashreport);
+                throw new ReportedException(crashreport);
+            }
 
-                this.methodProfiler.b();
-                this.methodProfiler.a("tracker");
-                worldserver.timings.tracker.startTiming(); // Spigot
-                // PandaSpigot start - controlled flush for entity tracker packets
-                List<NetworkManager> disabledFlushes = new ArrayList<>(worldserver.players.size());
-                for (EntityHuman player : worldserver.players) {
-                    if (!(player instanceof EntityPlayer)) continue; // skip non-player entities
-                    PlayerConnection connection = ((EntityPlayer) player).playerConnection;
-                    if (connection != null) {
-                        connection.networkManager.disableAutomaticFlush();
-                        disabledFlushes.add(connection.networkManager);
-                    }
+            this.methodProfiler.b();
+            this.methodProfiler.a("tracker");
+            worldserver.timings.tracker.startTiming(); // Spigot
+            // PandaSpigot start - controlled flush for entity tracker packets
+            List<NetworkManager> disabledFlushes = new ArrayList<>(worldserver.players.size());
+            for (EntityHuman player : worldserver.players) {
+                if (!(player instanceof EntityPlayer)) continue; // skip non-player entities
+                PlayerConnection connection = ((EntityPlayer) player).playerConnection;
+                if (connection != null) {
+                    connection.networkManager.disableAutomaticFlush();
+                    disabledFlushes.add(connection.networkManager);
                 }
-                try {
+            }
+            try {
                 // PandaSpigot end
                 if (this.getPlayerList().getPlayerCount() > 0) { // PandaSpigot - Skip updating entity tracker if zero players online
-                worldserver.getTracker().updatePlayers();
+                    worldserver.getTracker().updatePlayers();
                 } // PandaSpigot
                 // PandaSpigot start - controlled flush for entity tracker packets
-                } finally {
-                    for (NetworkManager networkManager : disabledFlushes) {
-                        networkManager.enableAutomaticFlush();
-                    }
+            } finally {
+                for (NetworkManager networkManager : disabledFlushes) {
+                    networkManager.enableAutomaticFlush();
                 }
-                // PandaSpigot end
-                worldserver.timings.tracker.stopTiming(); // Spigot
-                this.methodProfiler.b();
-                this.methodProfiler.b();
-                worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
+            }
+            // PandaSpigot end
+            worldserver.timings.tracker.stopTiming(); // Spigot
+            this.methodProfiler.b();
+            this.methodProfiler.b();
+            worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
@@ -1411,7 +1431,7 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         for (int i = 0; i < this.worlds.size(); ++i) {
             WorldServer worldserver = this.worlds.get(i);
             // CraftBukkit end
-            
+
             if (worldserver != null) {
                 worldserver.saveLevel();
             }
@@ -1567,10 +1587,10 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
     }
 
     // Spigot Start
-    public ServerConnection getServerConnection()
-    {
+    public ServerConnection getServerConnection() {
         return this.q;
     }
+
     // Spigot End
     public ServerConnection aq() {
         return this.q == null ? this.q = new ServerConnection(this) : this.q; // Spigot
@@ -1646,7 +1666,10 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         return true;
     }
 
-    public MinecraftSessionService getMinecraftSessionService() { return this.aD(); } // PandaSpigot - OBFHELPER
+    public MinecraftSessionService getMinecraftSessionService() {
+        return this.aD();
+    } // PandaSpigot - OBFHELPER
+
     public MinecraftSessionService aD() {
         return this.W;
     }
@@ -1692,7 +1715,8 @@ public abstract class MinecraftServer extends com.hpfxd.pandaspigot.tickloop.Ree
         return getServer().worlds.get(0).getGameRules().getBoolean("sendCommandFeedback");
     }
 
-    public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {}
+    public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
+    }
 
     public int aI() {
         return 29999984;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 47af49c25e1ce57a93aa4797f833ef8381fab523..a328d84b75233933403aa5992c8199a5b6ce1b2c 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -20,6 +20,7 @@ import org.apache.logging.log4j.Logger;
 import java.util.*;
 import java.util.logging.Level;
 
+import org.bukkit.Bukkit;
 import org.bukkit.WeatherType;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.util.LongHash;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java b/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
index 1c54b7d649ae4cb37c701573ff76e745edcc929e..542309d24433919e6cdf085940f3dc63381dadf9 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
@@ -14,7 +14,7 @@ public final class CommandPermissions {
         Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all vanilla minecraft commands", parent);
 
         DefaultPermissions.registerPermission(PREFIX + "kill", "Allows the user to commit suicide", PermissionDefault.OP, commands);
-        DefaultPermissions.registerPermission(PREFIX + "me", "Allows the user to perform a chat action", PermissionDefault.TRUE, commands);
+        DefaultPermissions.registerPermission(PREFIX + "me/liuli/path", "Allows the user to perform a chat action", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "tell", "Allows the user to privately message another player", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "say", "Allows the user to talk as the console", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "give", "Allows the user to give items to players", PermissionDefault.OP, commands);
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index c2ad90c820b92cea823f7b3d92787854d3c5ca71..525510dfbdf03bd9bb1711139a195e7c75510b19 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -1,24 +1,30 @@
 package org.spigotmc;
 
+import co.aikar.timings.SpigotTimings;
 import gnu.trove.set.TByteSet;
 import gnu.trove.set.hash.TByteHashSet;
-import net.minecraft.server.Block;
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.Blocks;
-import net.minecraft.server.World;
+import gnu.trove.set.hash.THashSet;
+import net.minecraft.server.*;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import co.aikar.timings.SpigotTimings;
 
-// PaperSpigot start
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.Set;
 // PaperSpigot end
 
-public class AntiXray
-{
+public class AntiXray {
+
+    //    // Used to keep track of which blocks to obfuscate
+//    private final boolean[] obfuscateBlocks = new boolean[Short.MAX_VALUE]; PandaSpigot
+    //PandaSpigot start
+    private final Set<Integer> hiddenBlocks = new THashSet<Integer>();
+    private final Set<Integer> replaceBlocks = new THashSet<Integer>();
+    //PandaSpigot end
+
+    private final Set<Integer> oreBlocks = new HashSet<>();
+
+    private final Set<BlockPosition> transparentOreAdjacent = new HashSet<>();
 
-    // Used to keep track of which blocks to obfuscate
-    private final boolean[] obfuscateBlocks = new boolean[ Short.MAX_VALUE ];
     // Used to select a random replacement ore
     private final byte[] replacementOres;
     // PaperSpigot start
@@ -26,26 +32,47 @@ public class AntiXray
     public final Set<BlockPosition> pendingUpdates = new HashSet<BlockPosition>();
     // PaperSpigot end
 
-    public AntiXray(SpigotWorldConfig config)
-    {
+
+    public boolean getObfuscateBlocks(World world, int blockId) {
+        return ((world.spigotConfig.engineMode == 1) ? hiddenBlocks.contains(blockId) : replaceBlocks.contains(blockId)) || isHideCaveOre(world, blockId);
+    }
+
+    public boolean isHideCaveOre(World world, int blockId) {
+        return (world.spigotConfig.antiXrayHideCaveOre ? oreBlocks.contains(blockId) : false);
+    }
+
+
+    public AntiXray(SpigotWorldConfig config) {
         // Set all listed blocks as true to be obfuscated
-        for ( int id : ( config.engineMode == 1 ) ? config.hiddenBlocks : config.replaceBlocks )
-        {
-            obfuscateBlocks[id] = true;
-        }
+//        for ( int id : ( config.engineMode == 1 ) ? config.hiddenBlocks : config.replaceBlocks )
+//        {
+//            obfuscateBlocks[id] = true;
+//        }
+        //PandaSpigot start
+        hiddenBlocks.addAll(new HashSet<>(config.hiddenBlocks));
+        replaceBlocks.addAll(new HashSet<>(config.replaceBlocks));
+        //PandaSpigot end
 
         // For every block
         TByteSet blocks = new TByteHashSet();
-        for ( Integer i : config.hiddenBlocks )
-        {
-            Block block = Block.getById( i );
+        for (Integer i : config.hiddenBlocks) {
+            Block block = Block.getById(i);
             // Check it exists and is not a tile entity
-            if ( block != null && !block.isTileEntity() )
-            {
+            if (block != null && !block.isTileEntity()) {
                 // Add it to the set of replacement blocks
-                blocks.add( (byte) (int) i );
+                blocks.add((byte) (int) i);
             }
         }
+
+        oreBlocks.clear();
+        oreBlocks.add(Block.getId(Blocks.DIAMOND_ORE));
+        oreBlocks.add(Block.getId(Blocks.IRON_ORE));
+        oreBlocks.add(Block.getId(Blocks.COAL_ORE));
+        oreBlocks.add(Block.getId(Blocks.GOLD_ORE));
+        oreBlocks.add(Block.getId(Blocks.REDSTONE_ORE));
+        oreBlocks.add(Block.getId(Blocks.LAPIS_ORE));
+        oreBlocks.add(Block.getId(Blocks.EMERALD_ORE));
+        oreBlocks.add(Block.getId(Blocks.LIT_REDSTONE_ORE));
         // Bake it to a flat array of replacements
         replacementOres = blocks.toArray();
     }
@@ -53,15 +80,12 @@ public class AntiXray
     /**
      * PaperSpigot - Flush queued block updates for world.
      */
-    public void flushUpdates(World world)
-    {
-        if ( world.spigotConfig.antiXray && !pendingUpdates.isEmpty() )
-        {
+    public void flushUpdates(World world) {
+        if (world.spigotConfig.antiXray && !pendingUpdates.isEmpty()) {
             queueUpdates = false;
 
-            for ( BlockPosition position : pendingUpdates )
-            {
-                updateNearbyBlocks( world, position );
+            for (BlockPosition position : pendingUpdates) {
+                updateNearbyBlocks(world, position);
             }
 
             pendingUpdates.clear();
@@ -73,19 +97,16 @@ public class AntiXray
      * Starts the timings handler, then updates all blocks within the set radius
      * of the given coordinate, revealing them if they are hidden ores.
      */
-    public void updateNearbyBlocks(World world, BlockPosition position)
-    {
-        if ( world.spigotConfig.antiXray )
-        {
+    public void updateNearbyBlocks(World world, BlockPosition position) {
+        if (world.spigotConfig.antiXray) {
             // PaperSpigot start
-            if ( queueUpdates )
-            {
-                pendingUpdates.add( position );
+            if (queueUpdates) {
+                pendingUpdates.add(position);
                 return;
             }
             // PaperSpigot end
             SpigotTimings.antiXrayUpdateTimer.startTiming();
-            updateNearbyBlocks( world, position, 2, false ); // 2 is the radius, we shouldn't change it as that would make it exponentially slower
+            updateNearbyBlocks(world, position, world.spigotConfig.range, false); // 2 is the radius, we shouldn't change it as that would make it exponentially slower
             SpigotTimings.antiXrayUpdateTimer.stopTiming();
         }
     }
@@ -94,24 +115,49 @@ public class AntiXray
      * Starts the timings handler, and then removes all non exposed ores from
      * the chunk buffer.
      */
-    public void obfuscateSync(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
-    {
-        if ( world.spigotConfig.antiXray )
-        {
+    public void obfuscateSync(int chunkX, int chunkY, int bitmask, byte[] buffer, World world) {
+        if (world.spigotConfig.antiXray) {
             SpigotTimings.antiXrayObfuscateTimer.startTiming();
-            obfuscate( chunkX, chunkY, bitmask, buffer, world );
+            obfuscate(chunkX, chunkY, bitmask, buffer, world);
             SpigotTimings.antiXrayObfuscateTimer.stopTiming();
         }
     }
 
+    public static double calculateDistance(BlockPosition v1, BlockPosition v2) {
+        // 거리 계산: sqrt((x2 - x1)^2 + (y2 - y1)^2 + (z2 - z1)^2)
+        return Math.sqrt(Math.pow(v2.getX() - v1.getX(), 2) + Math.pow(v2.getY() - v1.getY(), 2) + Math.pow(v2.getZ() - v1.getZ(), 2));
+    }
+
+    public void updateSeeByTransparentOreAdjacent(World world) {
+//        System.out.println(world.getWorld().getName());
+//        System.out.println("doTick!!");
+//        System.out.println(transparentOreAdjacent.size());
+        for (EntityHuman entityHuman : world.players) {
+//            org.bukkit.block.Block target = entityHuman.getBukkitEntity()
+//                .getTargetBlock(new HashSet<>(Collections.singletonList(org.bukkit.Material.AIR)), 30);
+//            BlockPosition playerPosition = new BlockPosition(target.getX(), target.getX(), target.getZ());
+            BlockPosition playerPosition = new BlockPosition(entityHuman.locX, entityHuman.locY, entityHuman.locZ);
+            Iterator<BlockPosition> transparentOreAdjacent = this.transparentOreAdjacent.iterator();
+            while (transparentOreAdjacent.hasNext()) {
+                BlockPosition blockPosition = transparentOreAdjacent.next();
+
+                if (calculateDistance(playerPosition, blockPosition) > world.spigotConfig.hideCaveOreRange) continue;
+                world.notify(blockPosition);
+                transparentOreAdjacent.remove();
+            }
+
+        }
+    }
+
+
+
+
     /**
      * Removes all non exposed ores from the chunk buffer.
      */
-    public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
-    {
+    public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world) {
         // If the world is marked as obfuscated
-        if ( world.spigotConfig.antiXray )
-        {
+        if (world.spigotConfig.antiXray) {
             // Initial radius to search around for air
             int initialRadius = 1;
             // Which block in the buffer we are looking at, anywhere from 0 to 16^4
@@ -124,8 +170,7 @@ public class AntiXray
             int startZ = chunkY << 4;
 
             byte replaceWithTypeId;
-            switch ( world.getWorld().getEnvironment() )
-            {
+            switch (world.getWorld().getEnvironment()) {
                 case NETHER:
                     replaceWithTypeId = (byte) CraftMagicNumbers.getId(Blocks.NETHERRACK);
                     break;
@@ -137,53 +182,45 @@ public class AntiXray
                     break;
             }
 
+
             // Chunks can have up to 16 sections
-            for ( int i = 0; i < 16; i++ )
-            {
+            for (int i = 0; i < 16; i++) {
                 // If the bitmask indicates this chunk is sent...
-                if ( ( bitmask & 1 << i ) != 0 )
-                {
+                if ((bitmask & 1 << i) != 0) {
                     // Work through all blocks in the chunk, y,z,x
-                    for ( int y = 0; y < 16; y++ )
-                    {
-                        for ( int z = 0; z < 16; z++ )
-                        {
-                            for ( int x = 0; x < 16; x++ )
-                            {
+                    for (int y = 0; y < 16; y++) {
+                        for (int z = 0; z < 16; z++) {
+                            for (int x = 0; x < 16; x++) {
                                 // For some reason we can get too far ahead of ourselves (concurrent modification on bulk chunks?) so if we do, just abort and move on
-                                if ( index >= buffer.length )
-                                {
+                                if (index >= buffer.length) {
                                     index++;
                                     continue;
                                 }
                                 // Grab the block ID in the buffer.
                                 // TODO: extended IDs are not yet supported
-                                int blockId = (buffer[index << 1] & 0xFF) 
-                                        | ((buffer[(index << 1) + 1] & 0xFF) << 8);
+                                int blockId = (buffer[index << 1] & 0xFF)
+                                    | ((buffer[(index << 1) + 1] & 0xFF) << 8);
                                 blockId >>>= 4;
                                 // Check if the block should be obfuscated
-                                if ( obfuscateBlocks[blockId] )
+                                if (getObfuscateBlocks(world, blockId)) //PandaSpigot - AntiXray-Hide-TransparentOreAdjacent
                                 {
+                                    BlockPosition position = new BlockPosition(startX + x, (i << 4) + y, startZ + z);
                                     // The world isn't loaded, bail out
-                                    if ( !isLoaded( world, new BlockPosition( startX + x, ( i << 4 ) + y, startZ + z ), initialRadius ) )
-                                    {
+                                    if (!isLoaded(world, position, initialRadius)) {
                                         index++;
                                         continue;
                                     }
                                     // On the otherhand, if radius is 0, or the nearby blocks are all non air, we can obfuscate
-                                    if ( !hasTransparentBlockAdjacent( world, new BlockPosition( startX + x, ( i << 4 ) + y, startZ + z ), initialRadius ) )
-                                    {
+                                    if (!hasTransparentBlockAdjacent(world, position, initialRadius)) {
                                         int newId = blockId;
-                                        switch ( world.spigotConfig.engineMode )
-                                        {
+                                        switch (world.spigotConfig.engineMode) {
                                             case 1:
                                                 // Replace with replacement material
                                                 newId = replaceWithTypeId & 0xFF;
                                                 break;
                                             case 2:
                                                 // Replace with random ore.
-                                                if ( randomOre >= replacementOres.length )
-                                                {
+                                                if (randomOre >= replacementOres.length) {
                                                     randomOre = 0;
                                                 }
                                                 newId = replacementOres[randomOre++] & 0xFF;
@@ -192,9 +229,16 @@ public class AntiXray
                                         newId <<= 4;
                                         buffer[index << 1] = (byte) (newId & 0xFF);
                                         buffer[(index << 1) + 1] = (byte) ((newId >> 8) & 0xFF);
+                                    } else if (isHideCaveOre(world, blockId)) {
+                                        if (!world.getWorld().getEnvironment().equals(org.bukkit.World.Environment.NORMAL))
+                                            continue;
+                                        int newId = replaceWithTypeId & 0xFF;
+                                        newId <<= 4;
+                                        buffer[index << 1] = (byte) (newId & 0xFF);
+                                        buffer[(index << 1) + 1] = (byte) ((newId >> 8) & 0xFF);
+                                        transparentOreAdjacent.add(position);
                                     }
                                 }
-
                                 index++;
                             }
                         }
@@ -204,56 +248,50 @@ public class AntiXray
         }
     }
 
-    private void updateNearbyBlocks(World world, BlockPosition position, int radius, boolean updateSelf)
-    {
+    private void updateNearbyBlocks(World world, BlockPosition position, int radius, boolean updateSelf) {
         // If the block in question is loaded
-        if ( world.isLoaded( position ) )
-        {
+        if (world.isLoaded(position)) {
             // Get block id
             Block block = world.getType(position).getBlock();
 
             // See if it needs update
-            if ( updateSelf && obfuscateBlocks[Block.getId( block )] )
-            {
+            if (updateSelf && getObfuscateBlocks(world, Block.getId(block))) {
                 // Send the update
-                world.notify( position );
+                world.notify(position);
             }
 
             // Check other blocks for updates
-            if ( radius > 0 )
-            {
-                updateNearbyBlocks( world, position.east(), radius - 1, true );
-                updateNearbyBlocks( world, position.west(), radius - 1, true );
-                updateNearbyBlocks( world, position.up(), radius - 1, true );
-                updateNearbyBlocks( world, position.down(), radius - 1, true );
-                updateNearbyBlocks( world, position.south(), radius - 1, true );
-                updateNearbyBlocks( world, position.north(), radius - 1, true );
+            if (radius > 0) {
+                updateNearbyBlocks(world, position.east(), radius - 1, true);
+                updateNearbyBlocks(world, position.west(), radius - 1, true);
+                updateNearbyBlocks(world, position.up(), radius - 1, true);
+                updateNearbyBlocks(world, position.down(), radius - 1, true);
+                updateNearbyBlocks(world, position.south(), radius - 1, true);
+                updateNearbyBlocks(world, position.north(), radius - 1, true);
             }
         }
     }
 
-    private static boolean isLoaded(World world, BlockPosition position, int radius)
-    {
-        return world.isLoaded( position )
-                && ( radius == 0 ||
-                ( isLoaded( world, position.east(), radius - 1 )
-                && isLoaded( world, position.west(), radius - 1 )
-                && isLoaded( world, position.up(), radius - 1 )
-                && isLoaded( world, position.down(), radius - 1 )
-                && isLoaded( world, position.south(), radius - 1 )
-                && isLoaded( world, position.north(), radius - 1 ) ) );
+    private static boolean isLoaded(World world, BlockPosition position, int radius) {
+        return world.isLoaded(position)
+            && (radius == 0 ||
+            (isLoaded(world, position.east(), radius - 1)
+                && isLoaded(world, position.west(), radius - 1)
+                && isLoaded(world, position.up(), radius - 1)
+                && isLoaded(world, position.down(), radius - 1)
+                && isLoaded(world, position.south(), radius - 1)
+                && isLoaded(world, position.north(), radius - 1)));
     }
 
-    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition position, int radius)
-    {
+    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition position, int radius) {
         return !isSolidBlock(world.getType(position, false).getBlock()) /* isSolidBlock */
-                || ( radius > 0
-                && ( hasTransparentBlockAdjacent( world, position.east(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.west(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.up(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.down(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.south(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.north(), radius - 1 ) ) );
+            || (radius > 0
+            && (hasTransparentBlockAdjacent(world, position.east(), radius - 1)
+            || hasTransparentBlockAdjacent(world, position.west(), radius - 1)
+            || hasTransparentBlockAdjacent(world, position.up(), radius - 1)
+            || hasTransparentBlockAdjacent(world, position.down(), radius - 1)
+            || hasTransparentBlockAdjacent(world, position.south(), radius - 1)
+            || hasTransparentBlockAdjacent(world, position.north(), radius - 1)));
     }
 
     private static boolean isSolidBlock(Block block) {
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 8e86212aa5deae00c55cacc7207525df67a1868e..0a0f271f2e23510434742b38bcf8f48e29d5f6aa 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -2,83 +2,73 @@ package org.spigotmc;
 
 import java.util.Arrays;
 import java.util.List;
+
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class SpigotWorldConfig
-{
+public class SpigotWorldConfig {
 
     private final String worldName;
     private final YamlConfiguration config;
     private boolean verbose;
 
-    public SpigotWorldConfig(String worldName)
-    {
+    public SpigotWorldConfig(String worldName) {
         this.worldName = worldName;
         this.config = SpigotConfig.config;
         init();
     }
 
-    public void init()
-    {
-        this.verbose = getBoolean( "verbose", true );
+    public void init() {
+        this.verbose = getBoolean("verbose", true);
 
-        log( "-------- World Settings For [" + worldName + "] --------" );
-        SpigotConfig.readConfig( SpigotWorldConfig.class, this );
+        log("-------- World Settings For [" + worldName + "] --------");
+        SpigotConfig.readConfig(SpigotWorldConfig.class, this);
     }
 
-    private void log(String s)
-    {
-        if ( verbose )
-        {
-            Bukkit.getLogger().info( s );
+    private void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
         }
     }
 
-    private void set(String path, Object val)
-    {
-        config.set( "world-settings.default." + path, val );
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
     }
 
-    private boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getBoolean( "world-settings." + worldName + "." + path, config.getBoolean( "world-settings.default." + path ) );
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
     }
 
-    private double getDouble(String path, double def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getDouble( "world-settings." + worldName + "." + path, config.getDouble( "world-settings.default." + path ) );
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
     }
 
-    private int getInt(String path, int def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getInt( "world-settings." + worldName + "." + path, config.getInt( "world-settings.default." + path ) );
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
     }
 
-    private <T> List getList(String path, T def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+    private <T> List getList(String path, T def) {
+        config.addDefault("world-settings.default." + path, def);
+        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
     }
 
-    private String getString(String path, String def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getString( "world-settings." + worldName + "." + path, config.getString( "world-settings.default." + path ) );
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
     }
 
     public int chunksPerTick;
     public boolean clearChunksOnTick;
-    private void chunksPerTick()
-    {
-        chunksPerTick = getInt( "chunks-per-tick", 650 );
-        log( "Chunks to Grow per Tick: " + chunksPerTick );
 
-        clearChunksOnTick = getBoolean( "clear-tick-list", false );
-        log( "Clear tick list: " + clearChunksOnTick );
+    private void chunksPerTick() {
+        chunksPerTick = getInt("chunks-per-tick", 650);
+        log("Chunks to Grow per Tick: " + chunksPerTick);
+
+        clearChunksOnTick = getBoolean("clear-tick-list", false);
+        log("Clear tick list: " + clearChunksOnTick);
     }
 
     // Crop growth rates
@@ -90,67 +80,66 @@ public class SpigotWorldConfig
     public int saplingModifier;
     public int wheatModifier;
     public int wartModifier;
-    private int getAndValidateGrowth(String crop)
-    {
-        int modifier = getInt( "growth." + crop.toLowerCase() + "-modifier", 100 );
-        if ( modifier == 0 )
-        {
-            log( "Cannot set " + crop + " growth to zero, defaulting to 100" );
+
+    private int getAndValidateGrowth(String crop) {
+        int modifier = getInt("growth." + crop.toLowerCase() + "-modifier", 100);
+        if (modifier == 0) {
+            log("Cannot set " + crop + " growth to zero, defaulting to 100");
             modifier = 100;
         }
-        log( crop + " Growth Modifier: " + modifier + "%" );
+        log(crop + " Growth Modifier: " + modifier + "%");
 
         return modifier;
     }
-    private void growthModifiers()
-    {
-        cactusModifier = getAndValidateGrowth( "Cactus" );
-        caneModifier = getAndValidateGrowth( "Cane" );
-        melonModifier = getAndValidateGrowth( "Melon" );
-        mushroomModifier = getAndValidateGrowth( "Mushroom" );
-        pumpkinModifier = getAndValidateGrowth( "Pumpkin" );
-        saplingModifier = getAndValidateGrowth( "Sapling" );
-        wheatModifier = getAndValidateGrowth( "Wheat" );
-        wartModifier = getAndValidateGrowth( "NetherWart" );
+
+    private void growthModifiers() {
+        cactusModifier = getAndValidateGrowth("Cactus");
+        caneModifier = getAndValidateGrowth("Cane");
+        melonModifier = getAndValidateGrowth("Melon");
+        mushroomModifier = getAndValidateGrowth("Mushroom");
+        pumpkinModifier = getAndValidateGrowth("Pumpkin");
+        saplingModifier = getAndValidateGrowth("Sapling");
+        wheatModifier = getAndValidateGrowth("Wheat");
+        wartModifier = getAndValidateGrowth("NetherWart");
     }
 
     public double itemMerge;
-    private void itemMerge()
-    {
-        itemMerge = getDouble("merge-radius.item", 2.5 );
-        log( "Item Merge Radius: " + itemMerge );
+
+    private void itemMerge() {
+        itemMerge = getDouble("merge-radius.item", 2.5);
+        log("Item Merge Radius: " + itemMerge);
     }
 
     public double expMerge;
-    private void expMerge()
-    {
-        expMerge = getDouble("merge-radius.exp", 3.0 );
-        log( "Experience Merge Radius: " + expMerge );
+
+    private void expMerge() {
+        expMerge = getDouble("merge-radius.exp", 3.0);
+        log("Experience Merge Radius: " + expMerge);
     }
 
     public int viewDistance;
-    private void viewDistance()
-    {
-        viewDistance = getInt( "view-distance", Bukkit.getViewDistance() );
-        log( "View Distance: " + viewDistance );
+
+    private void viewDistance() {
+        viewDistance = getInt("view-distance", Bukkit.getViewDistance());
+        log("View Distance: " + viewDistance);
     }
 
     public byte mobSpawnRange;
-    private void mobSpawnRange()
-    {
-        mobSpawnRange = (byte) getInt( "mob-spawn-range", 4 );
-        log( "Mob Spawn Range: " + mobSpawnRange );
+
+    private void mobSpawnRange() {
+        mobSpawnRange = (byte) getInt("mob-spawn-range", 4);
+        log("Mob Spawn Range: " + mobSpawnRange);
     }
 
     public int animalActivationRange = 32;
     public int monsterActivationRange = 32;
     public int miscActivationRange = 16;
-    private void activationRange()
-    {
-        animalActivationRange = getInt( "entity-activation-range.animals", animalActivationRange );
-        monsterActivationRange = getInt( "entity-activation-range.monsters", monsterActivationRange );
-        miscActivationRange = getInt( "entity-activation-range.misc", miscActivationRange );
-        log( "Entity Activation Range: An " + animalActivationRange + " / Mo " + monsterActivationRange + " / Mi " + miscActivationRange );
+
+    private void activationRange() {
+        animalActivationRange = getInt("entity-activation-range.animals", animalActivationRange);
+        monsterActivationRange = getInt("entity-activation-range.monsters", monsterActivationRange);
+        miscActivationRange = getInt("entity-activation-range.misc", miscActivationRange);
+        log("Entity Activation Range: An " + animalActivationRange + " / Mo " + monsterActivationRange + " / Mi " + miscActivationRange);
     }
 
     public int playerTrackingRange = 48;
@@ -158,185 +147,194 @@ public class SpigotWorldConfig
     public int monsterTrackingRange = 48;
     public int miscTrackingRange = 32;
     public int otherTrackingRange = 64;
-    private void trackingRange()
-    {
-        playerTrackingRange = getInt( "entity-tracking-range.players", playerTrackingRange );
-        animalTrackingRange = getInt( "entity-tracking-range.animals", animalTrackingRange );
-        monsterTrackingRange = getInt( "entity-tracking-range.monsters", monsterTrackingRange );
-        miscTrackingRange = getInt( "entity-tracking-range.misc", miscTrackingRange );
-        otherTrackingRange = getInt( "entity-tracking-range.other", otherTrackingRange );
-        log( "Entity Tracking Range: Pl " + playerTrackingRange + " / An " + animalTrackingRange + " / Mo " + monsterTrackingRange + " / Mi " + miscTrackingRange + " / Other " + otherTrackingRange );
+
+    private void trackingRange() {
+        playerTrackingRange = getInt("entity-tracking-range.players", playerTrackingRange);
+        animalTrackingRange = getInt("entity-tracking-range.animals", animalTrackingRange);
+        monsterTrackingRange = getInt("entity-tracking-range.monsters", monsterTrackingRange);
+        miscTrackingRange = getInt("entity-tracking-range.misc", miscTrackingRange);
+        otherTrackingRange = getInt("entity-tracking-range.other", otherTrackingRange);
+        log("Entity Tracking Range: Pl " + playerTrackingRange + " / An " + animalTrackingRange + " / Mo " + monsterTrackingRange + " / Mi " + miscTrackingRange + " / Other " + otherTrackingRange);
     }
 
     public int hopperTransfer;
     public int hopperCheck;
     public int hopperAmount;
-    private void hoppers()
-    {
+
+    private void hoppers() {
         // Set the tick delay between hopper item movements
-        hopperTransfer = getInt( "ticks-per.hopper-transfer", 8 );
+        hopperTransfer = getInt("ticks-per.hopper-transfer", 8);
         // Set the tick delay between checking for items after the associated
         // container is empty. Default to the hopperTransfer value to prevent
         // hopper sorting machines from becoming out of sync.
-        hopperCheck = getInt( "ticks-per.hopper-check", hopperTransfer );
-        hopperAmount = getInt( "hopper-amount", 1 );
-        log( "Hopper Transfer: " + hopperTransfer + " Hopper Check: " + hopperCheck + " Hopper Amount: " + hopperAmount );
+        hopperCheck = getInt("ticks-per.hopper-check", hopperTransfer);
+        hopperAmount = getInt("hopper-amount", 1);
+        log("Hopper Transfer: " + hopperTransfer + " Hopper Check: " + hopperCheck + " Hopper Amount: " + hopperAmount);
     }
 
     public boolean randomLightUpdates;
-    private void lightUpdates()
-    {
-        randomLightUpdates = getBoolean( "random-light-updates", false );
-        log( "Random Lighting Updates: " + randomLightUpdates );
+
+    private void lightUpdates() {
+        randomLightUpdates = getBoolean("random-light-updates", false);
+        log("Random Lighting Updates: " + randomLightUpdates);
     }
 
     public boolean saveStructureInfo;
-    private void structureInfo()
-    {
-        saveStructureInfo = getBoolean( "save-structure-info", true );
-        log( "Structure Info Saving: " + saveStructureInfo );
-        if ( !saveStructureInfo )
-        {
-            log( "*** WARNING *** You have selected to NOT save structure info. This may cause structures such as fortresses to not spawn mobs!" );
-            log( "*** WARNING *** Please use this option with caution, SpigotMC is not responsible for any issues this option may cause in the future!" );
+
+    private void structureInfo() {
+        saveStructureInfo = getBoolean("save-structure-info", true);
+        log("Structure Info Saving: " + saveStructureInfo);
+        if (!saveStructureInfo) {
+            log("*** WARNING *** You have selected to NOT save structure info. This may cause structures such as fortresses to not spawn mobs!");
+            log("*** WARNING *** Please use this option with caution, SpigotMC is not responsible for any issues this option may cause in the future!");
         }
     }
 
     public int itemDespawnRate;
-    private void itemDespawnRate()
-    {
-        itemDespawnRate = getInt( "item-despawn-rate", 6000 );
-        log( "Item Despawn Rate: " + itemDespawnRate );
+
+    private void itemDespawnRate() {
+        itemDespawnRate = getInt("item-despawn-rate", 6000);
+        log("Item Despawn Rate: " + itemDespawnRate);
     }
 
     public int arrowDespawnRate;
-    private void arrowDespawnRate()
-    {
-        arrowDespawnRate = getInt( "arrow-despawn-rate", 1200  );
-        log( "Arrow Despawn Rate: " + arrowDespawnRate );
+
+    private void arrowDespawnRate() {
+        arrowDespawnRate = getInt("arrow-despawn-rate", 1200);
+        log("Arrow Despawn Rate: " + arrowDespawnRate);
     }
-    
+
     public boolean antiXray;
+    public int range;
+    public boolean antiXrayHideCaveOre;
     public int engineMode;
+    public int hideCaveOreRange;
     public List<Integer> hiddenBlocks;
     public List<Integer> replaceBlocks;
     public AntiXray antiXrayInstance;
-    private void antiXray()
-    {
-        antiXray = getBoolean( "anti-xray.enabled", true );
-        log( "Anti X-Ray: " + antiXray );
 
-        engineMode = getInt( "anti-xray.engine-mode", 1 );
-        log( "\tEngine Mode: " + engineMode );
+    private void antiXray() {
+        antiXray = getBoolean("anti-xray.enabled", true);
+        log("Anti X-Ray: " + antiXray);
+        range = getInt("anti-xray.range", 2);
+        log("Anti X-Ray range: " + range);
 
-        if ( SpigotConfig.version < 5 )
-        {
-            set( "anti-xray.blocks", null );
-        }
-        hiddenBlocks = getList( "anti-xray.hide-blocks", Arrays.asList( new Integer[]
-        {
-            14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130
-        } ) );
-        log( "\tHidden Blocks: " + hiddenBlocks );
 
-        replaceBlocks = getList( "anti-xray.replace-blocks", Arrays.asList( new Integer[]
-        {
-            1, 5
-        } ) );
-        log( "\tReplace Blocks: " + replaceBlocks );
+        antiXrayHideCaveOre = getBoolean("anti-xray.hide-cave-ore.enabled", false);
+        log("hide-cave-ore : " + antiXrayHideCaveOre);
+        hideCaveOreRange = getInt("anti-xray.hide-cave-ore.range", 25);
+        log("hide-cave-ore.range : " + hideCaveOreRange);
+
+        engineMode = getInt("anti-xray.engine-mode", 1);
+        log("\tEngine Mode: " + engineMode);
+
+        if (SpigotConfig.version < 5) {
+            set("anti-xray.blocks", null);
+        }
+        hiddenBlocks = getList("anti-xray.hide-blocks", Arrays.asList(new Integer[]
+            {
+                14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130
+            }));
+        log("\tHidden Blocks: " + hiddenBlocks);
 
-        antiXrayInstance = new AntiXray( this );
+        replaceBlocks = getList("anti-xray.replace-blocks", Arrays.asList(new Integer[]
+            {
+                1, 5
+            }));
+        log("\tReplace Blocks: " + replaceBlocks);
+        if (antiXrayInstance == null)
+            antiXrayInstance = new AntiXray(this);
     }
 
     public boolean zombieAggressiveTowardsVillager;
-    private void zombieAggressiveTowardsVillager()
-    {
-        zombieAggressiveTowardsVillager = getBoolean( "zombie-aggressive-towards-villager", true );
-        log( "Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager );
+
+    private void zombieAggressiveTowardsVillager() {
+        zombieAggressiveTowardsVillager = getBoolean("zombie-aggressive-towards-villager", true);
+        log("Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager);
     }
 
     public boolean nerfSpawnerMobs;
-    private void nerfSpawnerMobs()
-    {
-        nerfSpawnerMobs = getBoolean( "nerf-spawner-mobs", false );
-        log( "Nerfing mobs spawned from spawners: " + nerfSpawnerMobs );
+
+    private void nerfSpawnerMobs() {
+        nerfSpawnerMobs = getBoolean("nerf-spawner-mobs", false);
+        log("Nerfing mobs spawned from spawners: " + nerfSpawnerMobs);
     }
 
     public boolean enableZombiePigmenPortalSpawns;
-    private void enableZombiePigmenPortalSpawns()
-    {
-        enableZombiePigmenPortalSpawns = getBoolean( "enable-zombie-pigmen-portal-spawns", true );
-        log( "Allow Zombie Pigmen to spawn from portal blocks: " + enableZombiePigmenPortalSpawns );
+
+    private void enableZombiePigmenPortalSpawns() {
+        enableZombiePigmenPortalSpawns = getBoolean("enable-zombie-pigmen-portal-spawns", true);
+        log("Allow Zombie Pigmen to spawn from portal blocks: " + enableZombiePigmenPortalSpawns);
     }
 
     public int maxBulkChunk;
-    private void bulkChunkCount()
-    {
-        maxBulkChunk = getInt( "max-bulk-chunks", 10 );
-        log( "Sending up to " + maxBulkChunk + " chunks per packet" );
+
+    private void bulkChunkCount() {
+        maxBulkChunk = getInt("max-bulk-chunks", 10);
+        log("Sending up to " + maxBulkChunk + " chunks per packet");
     }
 
     public int maxCollisionsPerEntity;
-    private void maxEntityCollision()
-    {
-        maxCollisionsPerEntity = getInt( "max-entity-collisions", 8 );
-        log( "Max Entity Collisions: " + maxCollisionsPerEntity );
+
+    private void maxEntityCollision() {
+        maxCollisionsPerEntity = getInt("max-entity-collisions", 8);
+        log("Max Entity Collisions: " + maxCollisionsPerEntity);
     }
 
     public int dragonDeathSoundRadius;
-    private void keepDragonDeathPerWorld()
-    {
-        dragonDeathSoundRadius = getInt( "dragon-death-sound-radius", 0 );
+
+    private void keepDragonDeathPerWorld() {
+        dragonDeathSoundRadius = getInt("dragon-death-sound-radius", 0);
     }
 
     public int witherSpawnSoundRadius;
-    private void witherSpawnSoundRadius()
-    {
-        witherSpawnSoundRadius = getInt( "wither-spawn-sound-radius", 0 );
+
+    private void witherSpawnSoundRadius() {
+        witherSpawnSoundRadius = getInt("wither-spawn-sound-radius", 0);
     }
 
     public int villageSeed;
     public int largeFeatureSeed;
-    private void initWorldGenSeeds()
-    {
-        villageSeed = getInt( "seed-village", 10387312 );
-        largeFeatureSeed = getInt( "seed-feature", 14357617 );
-        log( "Custom Map Seeds:  Village: " + villageSeed + " Feature: " + largeFeatureSeed );
+
+    private void initWorldGenSeeds() {
+        villageSeed = getInt("seed-village", 10387312);
+        largeFeatureSeed = getInt("seed-feature", 14357617);
+        log("Custom Map Seeds:  Village: " + villageSeed + " Feature: " + largeFeatureSeed);
     }
 
     public float walkExhaustion;
     public float sprintExhaustion;
     public float combatExhaustion;
     public float regenExhaustion;
-    private void initHunger()
-    {
-        walkExhaustion = (float) getDouble( "hunger.walk-exhaustion", 0.2 );
-        sprintExhaustion = (float) getDouble( "hunger.sprint-exhaustion", 0.8 );
-        combatExhaustion = (float) getDouble( "hunger.combat-exhaustion", 0.3 );
-        regenExhaustion = (float) getDouble( "hunger.regen-exhaustion", 3 );
+
+    private void initHunger() {
+        walkExhaustion = (float) getDouble("hunger.walk-exhaustion", 0.2);
+        sprintExhaustion = (float) getDouble("hunger.sprint-exhaustion", 0.8);
+        combatExhaustion = (float) getDouble("hunger.combat-exhaustion", 0.3);
+        regenExhaustion = (float) getDouble("hunger.regen-exhaustion", 3);
     }
 
     public int currentPrimedTnt = 0;
     public int maxTntTicksPerTick;
+
     private void maxTntPerTick() {
-        if ( SpigotConfig.version < 7 )
-        {
-            set( "max-tnt-per-tick", 100 );
+        if (SpigotConfig.version < 7) {
+            set("max-tnt-per-tick", 100);
         }
-        maxTntTicksPerTick = getInt( "max-tnt-per-tick", 100 );
-        log( "Max TNT Explosions: " + maxTntTicksPerTick );
+        maxTntTicksPerTick = getInt("max-tnt-per-tick", 100);
+        log("Max TNT Explosions: " + maxTntTicksPerTick);
     }
 
     public int hangingTickFrequency;
-    private void hangingTickFrequency()
-    {
-        hangingTickFrequency = getInt( "hanging-tick-frequency", 100 );
+
+    private void hangingTickFrequency() {
+        hangingTickFrequency = getInt("hanging-tick-frequency", 100);
     }
 
     public int tileMaxTickTime;
     public int entityMaxTickTime;
-    private void maxTickTimes()
-    {
+
+    private void maxTickTimes() {
         tileMaxTickTime = getInt("max-tick-time.tile", 50);
         entityMaxTickTime = getInt("max-tick-time.entity", 50);
         log("Tile Max Tick Time: " + tileMaxTickTime + "ms Entity max Tick Time: " + entityMaxTickTime + "ms");
